
/** 
	Apply some base styles to specific elements.
	Final styles.css will be build from this main.css.
	If you add some stles in index.html - they will also 
	be added by Tailwind to the end of the styles.css.
	Directives are custom Tailwind-specific at-rules you can use 
	in your CSS that offer special functionality for Tailwind CSS projects.
*/

/**
 * This injects Tailwind's base styles and any base styles registered by
 * plugins.
 */
@tailwind base;

/**
 * This injects Tailwind's component classes and any component classes
 * registered by plugins.
 */
@tailwind components;

/**
 * This injects Tailwind's utility classes and any utility classes registered
 * by plugins.
 */
@tailwind utilities;

/**
 * Use @apply to inline any existing utility classes into your own custom CSS.
 * This is useful when you need to write custom CSS (like to override the styles 
 * in a third-party library) but still want to work with your design tokens and 
 * use the same syntax you’re used to using in your HTML.
 */
.header-link {
	@apply text-gray-500 font-semibold inline-block py-3 px-2 border-b-2 border-transparent hover:text-purple-800 hover:border-purple-800;
}

.header-btn {
	@apply ml-2 py-1 px-3 border-2 rounded-full border-indigo-600 text-indigo-600 hover:text-white hover:bg-indigo-800 focus:outline-none focus:ring-0 focus:ring-violet-300;
}


/**
 * @layer
 * Use the @layer directive to tell Tailwind which “bucket” a set of custom styles belong to. 
 * Valid layers are base, components, and utilities.
 * Do this if we want to override these rules in inline css for the element in our html code
 */
 @layer components {
	.pagination-item {
		@apply inline-block py-1 px-3 border border-gray-300 text-gray-500 hover:bg-gray-100 hover:text-gray-700;
	}
 }

 .footer-link {
	@apply inline-block text-gray-500 py-2 hover:underline decoration-gray-700 underline-offset-2;
 }